name: CI/CD to GKE (Testing Environment)

on:
  push:
    branches: [ cicd-testing ]

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    env:
      PROJECT_ID: smart-sales-464807
      CLUSTER_NAME: smart-sales-test
      REGION: us-east1
      DEPLOYMENT_NAME: react-app-testing
      NAMESPACE: testing
      IMAGE: us-central1-docker.pkg.dev/smart-sales-464807/gke-react-test-app/react-app:${{ github.sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci
        working-directory: ./

      - name: Build React app
        run: npm run build
        working-directory: ./

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin
          export USE_GKE_GCLOUD_AUTH_PLUGIN=True

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker us-central1-docker.pkg.dev --quiet

      - name: Build Docker image
        run: docker build -t $IMAGE .

      - name: Push Docker image
        run: docker push $IMAGE

      - name: Get GKE credentials
        run: |
          export USE_GKE_GCLOUD_AUTH_PLUGIN=True
          gcloud container clusters get-credentials $CLUSTER_NAME --region $REGION --project $PROJECT_ID

      - name: Create testing namespace
        run: |
          export USE_GKE_GCLOUD_AUTH_PLUGIN=True
          kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -

      - name: Apply testing deployment manifest
        run: |
          export USE_GKE_GCLOUD_AUTH_PLUGIN=True
          kubectl apply -f k8s/deployment-testing.yaml -n $NAMESPACE
        working-directory: ./

      - name: Set deployment image to current commit
        run: |
          export USE_GKE_GCLOUD_AUTH_PLUGIN=True
          kubectl set image deployment/$DEPLOYMENT_NAME react-app=$IMAGE --record -n $NAMESPACE
          kubectl rollout status deployment/$DEPLOYMENT_NAME -n $NAMESPACE
        working-directory: ./

      - name: Get external IP
        run: |
          export USE_GKE_GCLOUD_AUTH_PLUGIN=True
          echo "Waiting for external IP..."
          kubectl get service react-app-testing-service -n $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].ip}' || echo "IP not yet assigned"
